/* Generated by Yosys 0.53 (git sha1 53c22ab7c0ced80861c7536c5dae682c30fb5834, g++ 15.1.1 -O2 -flto=auto -ffat-lto-objects -fexceptions -fstack-protector-strong -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fPIC -O3) */

(* dynports =  1  *)
(* top =  1  *)
module shifter(i_data, i_shamt, i_dir, o_result);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [7:0] \computed_shifts[0] ;
  wire [7:0] \computed_shifts[1] ;
  wire [7:0] \computed_shifts[2] ;
  wire [7:0] \computed_shifts[3] ;
  wire [7:0] \computed_shifts[4] ;
  wire [7:0] \computed_shifts[5] ;
  wire [7:0] \computed_shifts[6] ;
  wire [7:0] \computed_shifts[7] ;
  input [7:0] i_data;
  wire [7:0] i_data;
  input i_dir;
  wire i_dir;
  input [2:0] i_shamt;
  wire [2:0] i_shamt;
  output [7:0] o_result;
  wire [7:0] o_result;
  (* full_case = 32'd1 *)
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd8)
  ) _08_ (
    .A(8'hxx),
    .B({ i_data, \computed_shifts[1] , \computed_shifts[2] , \computed_shifts[3] , \computed_shifts[4] , \computed_shifts[5] , \computed_shifts[6] , \computed_shifts[7]  }),
    .S({ _07_, _06_, _05_, _04_, _03_, _02_, _01_, _00_ }),
    .Y(o_result)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _09_ (
    .A(i_shamt),
    .B(3'h7),
    .Y(_00_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _10_ (
    .A(i_shamt),
    .B(3'h6),
    .Y(_01_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _11_ (
    .A(i_shamt),
    .B(3'h5),
    .Y(_02_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _12_ (
    .A(i_shamt),
    .B(3'h4),
    .Y(_03_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _13_ (
    .A(i_shamt),
    .B(3'h3),
    .Y(_04_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _14_ (
    .A(i_shamt),
    .B(3'h2),
    .Y(_05_)
  );
  (* full_case = 32'd1 *)
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _15_ (
    .A(i_shamt),
    .B(3'h1),
    .Y(_06_)
  );
  (* full_case = 32'd1 *)
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _16_ (
    .A(i_shamt),
    .Y(_07_)
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _17_ (
    .A({ i_data[3:0], 4'h0 }),
    .B({ 4'h0, i_data[7:4] }),
    .S(i_dir),
    .Y(\computed_shifts[4] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _18_ (
    .A({ i_data[2:0], 5'h00 }),
    .B({ 5'h00, i_data[7:5] }),
    .S(i_dir),
    .Y(\computed_shifts[5] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _19_ (
    .A({ i_data[1:0], 6'h00 }),
    .B({ 6'h00, i_data[7:6] }),
    .S(i_dir),
    .Y(\computed_shifts[6] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _20_ (
    .A({ i_data[0], 7'h00 }),
    .B({ 7'h00, i_data[7] }),
    .S(i_dir),
    .Y(\computed_shifts[7] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _21_ (
    .A({ i_data[6:0], 1'h0 }),
    .B({ 1'h0, i_data[7:1] }),
    .S(i_dir),
    .Y(\computed_shifts[1] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _22_ (
    .A({ i_data[5:0], 2'h0 }),
    .B({ 2'h0, i_data[7:2] }),
    .S(i_dir),
    .Y(\computed_shifts[2] )
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _23_ (
    .A({ i_data[4:0], 3'h0 }),
    .B({ 3'h0, i_data[7:3] }),
    .S(i_dir),
    .Y(\computed_shifts[3] )
  );
  assign \computed_shifts[0]  = i_data;
endmodule
